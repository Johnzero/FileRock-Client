# -*- coding: ascii -*-
#  ______ _ _      _____            _       _____ _ _            _
# |  ____(_) |    |  __ \          | |     / ____| (_)          | |
# | |__   _| | ___| |__) |___   ___| | __ | |    | |_  ___ _ __ | |_
# |  __| | | |/ _ \  _  // _ \ / __| |/ / | |    | | |/ _ \ '_ \| __|
# | |    | | |  __/ | \ \ (_) | (__|   <  | |____| | |  __/ | | | |_
# |_|    |_|_|\___|_|  \_\___/ \___|_|\_\  \_____|_|_|\___|_| |_|\__|
#
# Copyright (C) 2012 Heyware s.r.l.
#
# This file is part of FileRock Client.
#
# FileRock Client is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# FileRock Client is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with FileRock Client. If not, see <http://www.gnu.org/licenses/>.
#

"""
This is the LinkDialog module.




----

This module is part of the FileRock Client.

Copyright (C) 2012 - Heyware s.r.l.

FileRock Client is licensed under GPLv3 License.

"""
# generated by wxGlade 0.6.3 on Sun Jul  1 16:35:09 2012

import wx
import os
from filerockclient.interfaces import LinkingStatuses as LS
from filerockclient.ui.wxGui import Messages
from filerockclient.ui.wxGui.constants import IMAGE_PATH

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade

ERROR_COLOR = wx.Colour(255, 0, 0)
SUCCESS_COLOR = wx.Colour(0, 170, 70)
MESSAGE_COLOR = wx.Colour(0, 0, 0)
LOGOTYPE = os.path.join(IMAGE_PATH, "FileRockLogotype.png")
HEADLINE_PLACEHOLDER = u"Please insert your FileRock credentials"


class LinkDialog(wx.Dialog):
    def __init__(self, app, *args, **kwds):
        # begin wxGlade: LinkDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.DIALOG_NO_PARENT
        wx.Dialog.__init__(self, *args, **kwds)
        self.bitmap_1 = wx.StaticBitmap(self,
                                        -1,
                                        wx.Bitmap(LOGOTYPE, wx.BITMAP_TYPE_PNG))
        self.headline_label = wx.StaticText(self,
                                            -1,
                                            HEADLINE_PLACEHOLDER,
                                            style=wx.ALIGN_CENTRE)
        self.username_label = wx.StaticText(self, -1, "Username:")
        self.username_ctrl = wx.TextCtrl(self, -1, "")
        self.password_label = wx.StaticText(self, -1, "Password:")
        self.password_ctrl = wx.TextCtrl(self, -1, "", style=wx.TE_PASSWORD)
        self.message_label = wx.StaticText(self, -1, "")
        self.ok_button = wx.Button(self, wx.ID_OK, "")
        self.cancel_button = wx.Button(self, wx.ID_CANCEL, "")
        self.button_1 = wx.Button(self, -1, Messages.LINK_PROXY_BUTTON_LABEL)
        self.footer_label = wx.StaticText(self,
                                          -1,
                                          "Get your free account at",
                                          style=wx.ALIGN_CENTRE)
        self.footer_link = wx.HyperlinkCtrl(self,
                                            -1,
                                            "www.filerock.com",
                                            app.links["register"])

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.on_ok, self.ok_button)
        self.Bind(wx.EVT_BUTTON, self.on_cancel, self.cancel_button)
        self.Bind(wx.EVT_BUTTON, self.goto_proxySettings, self.button_1)
        # end wxGlade

        message = 'self.footer link should be wx.HyperlinkCtrl(self, \
                    -1, "www.filerock.com", app.links["register"])'
        assert self.footer_link.__class__.__name__ == 'HyperlinkCtrl', message

        self.username_label.SetLabel(Messages.LINK_USERNAME_LABEL)
        self.password_label.SetLabel(Messages.LINK_PASSWORD_LABEL)
        self.headline_label.SetLabel(Messages.LINK_HEADLINE_LABEL)
        self.footer_label.SetLabel(Messages.LINK_FOOTER_LABEL)
        self.Bind(wx.EVT_CLOSE, self.on_close)

        self.timer = wx.Timer(None)
        self.timer.Bind(wx.EVT_TIMER, self.on_close)

        font = self.message_label.GetFont()
        font.SetWeight(wx.FONTWEIGHT_BOLD)
        self.message_label.SetFont(font)

        self.messages = {
                     LS.SUCCESS: Messages.LINK_SUCCESS,
                     LS.GENERATING_RSA_KEY: Messages.LINK_GENERATING_RSA_KEY,
                     LS.SERVER_UNREACHABLE: Messages.LINK_SERVER_UNREACHABLE,
                     LS.SENDING: Messages.LINK_SENDING,
                     LS.SERVER_ERROR: Messages.LINK_SERVER_ERROR,
                     LS.WRONG_CREDENTIALS: Messages.LINK_WRONG_CREDENTIALS,
                     LS.MALFORMED_USERNAME: Messages.LINK_MALFORMED_USERNAME,
                     LS.LINKING_FAILED: Messages.LINK_LINKING_FAILED,
                     LS.UNKNOW_ERROR: Messages.LINK_UNKNOW_ERROR
                }
        self.message_color = {
                     LS.SUCCESS: SUCCESS_COLOR,
                     LS.SERVER_UNREACHABLE: ERROR_COLOR,
                     LS.GENERATING_RSA_KEY: MESSAGE_COLOR,
                     LS.SENDING: MESSAGE_COLOR,
                     LS.SERVER_ERROR: ERROR_COLOR,
                     LS.WRONG_CREDENTIALS: ERROR_COLOR,
                     LS.MALFORMED_USERNAME: ERROR_COLOR,
                     LS.LINKING_FAILED: ERROR_COLOR,
                     LS.UNKNOW_ERROR: ERROR_COLOR
                }

        self.user_provided_input = {}
        self.user_provided_input['provided'] = False
        self.synchronization = None
        self.status = -1
        self.app = app

    def __set_properties(self):
        # begin wxGlade: LinkDialog.__set_properties
        self.SetTitle(Messages.LINK_TITLE)
        _icon = wx.EmptyIcon()
        pathname = os.path.join(IMAGE_PATH, "FileRock.ico")
        _icon.CopyFromBitmap(wx.Bitmap(pathname, wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.username_ctrl.SetMinSize((200, 23))
        self.username_ctrl.SetFocus()
        self.password_ctrl.SetMinSize((200, 23))
        self.ok_button.SetDefault()
        # end wxGlade
        _icon = wx.Icon(pathname, wx.BITMAP_TYPE_ICO)
        self.SetIcon(_icon)

    def __do_layout(self):
        # begin wxGlade: LinkDialog.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.GridSizer(2, 2, 0, 50)
        grid_sizer_1 = wx.FlexGridSizer(3, 1, 6, 0)
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(self.bitmap_1, 0, wx.LEFT|wx.RIGHT|wx.TOP|wx.ALIGN_CENTER_HORIZONTAL, 15)
        sizer_1.Add(self.headline_label, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 10)
        sizer_4.Add(self.username_label, 0, wx.BOTTOM, 2)
        sizer_4.Add(self.username_ctrl, 0, 0, 0)
        grid_sizer_1.Add(sizer_4, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_5.Add(self.password_label, 0, wx.BOTTOM, 2)
        sizer_5.Add(self.password_ctrl, 0, 0, 0)
        grid_sizer_1.Add(sizer_5, 1, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.message_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_1.Add(grid_sizer_1, 0, wx.LEFT|wx.RIGHT|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 19)
        sizer_3.Add(self.ok_button, 0, 0, 0)
        sizer_3.Add(self.cancel_button, 0, 0, 0)
        sizer_2.Add(sizer_3, 0, wx.BOTTOM|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_2.Add(self.button_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 6)
        sizer_1.Add(sizer_2, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 10)
        sizer_1.Add(self.footer_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 10)
        sizer_1.Add(self.footer_link, 0, wx.BOTTOM|wx.ALIGN_CENTER_HORIZONTAL, 10)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        self.Centre()
        # end wxGlade


    def on_ok(self, event):  # wxGlade: LinkDialog.<event_handler>
        if self.status == LS.SUCCESS:
            self.Close()
        else:
            username = self.username_ctrl.GetValue()
            password = self.password_ctrl.GetValue()
            if username is not None and password is not None:
                self.user_provided_input['provided'] = True
                self.user_provided_input['username'] = username
                # notify the caller that user input is ready to be read
                self.user_provided_input['password'] = password
            else:
                self.user_provided_input['provided'] = False
            self.try_syncronize()
        self.ok_button.Disable()
        self.cancel_button.Disable()

    def on_cancel(self, event):  # wxGlade: LinkDialog.<event_handler>
        self.user_provided_input['provided'] = False
        self.Close()

    def goto_proxySettings(self, event): # wxGlade: LinkDialog.<event_handler>
        self.app.OnOptions(event)

# end of class LinkDialog

    def setUserProvidedInputMap(self, upi):
        # a map, keys 'username' and 'password' should
        # be properly when user says ok.
        self.user_provided_input = upi
        self.user_provided_input['provided'] = False
        if 'username' in upi and len(upi['username'].strip()) > 0:
            self.username_ctrl.SetValue(upi['username'])
            self.password_ctrl.SetFocus()

    def setSync(self, threadingEvent):
        # this is an threading.Event object used to notify the caller
        # that credentials are ready to be read
        self.synchronization = threadingEvent

    def initialize(self):
        self.username_ctrl.SetValue('')
        self.password_ctrl.SetValue('')
        self.message_label.SetLabel('')
        self.status = -1

    def try_syncronize(self):
        if self.synchronization:
            self.synchronization.set()
            self.synchronization = None

    def on_close(self, event):
        self.timer.Stop()
        self.try_syncronize()
        self.Hide()

    def change_status(self, event):
        if event.code >= len(self.messages):
            self.message_label.SetForegroundColour(wx.Color(255, 0, 0))
            self.message_label.SetLabel(self.messages[len(self.messages) - 1])
        else:
            self.message_label.SetForegroundColour(self.message_color[
                                                                event.code]
                                                   )
            self.message_label.SetLabel(self.messages[event.code])

        self.Layout()
        self.status = event.code
        if self.status != LS.SENDING and self.status != LS.SUCCESS:
            self.ok_button.Enable()
            self.cancel_button.Enable()
        if self.status == LS.SUCCESS:
            self.timer.Start(2000)