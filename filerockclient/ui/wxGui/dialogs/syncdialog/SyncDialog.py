# -*- coding: ascii -*-
#  ______ _ _      _____            _       _____ _ _            _
# |  ____(_) |    |  __ \          | |     / ____| (_)          | |
# | |__   _| | ___| |__) |___   ___| | __ | |    | |_  ___ _ __ | |_
# |  __| | | |/ _ \  _  // _ \ / __| |/ / | |    | | |/ _ \ '_ \| __|
# | |    | | |  __/ | \ \ (_) | (__|   <  | |____| | |  __/ | | | |_
# |_|    |_|_|\___|_|  \_\___/ \___|_|\_\  \_____|_|_|\___|_| |_|\__|
#
# Copyright (C) 2012 Heyware s.r.l.
#
# This file is part of FileRock Client.
#
# FileRock Client is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# FileRock Client is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with FileRock Client. If not, see <http://www.gnu.org/licenses/>.
#

"""
This is the SyncDialog module.




----

This module is part of the FileRock Client.

Copyright (C) 2012 - Heyware s.r.l.

FileRock Client is licensed under GPLv3 License.

"""
# generated by wxGlade 0.6.3 on Thu Jul  5 19:53:37 2012

import wx
import logging
import os
from threading import Thread

from filerockclient.ui.wxGui.dialogs.syncdialog.panel_2 import Panel2
from filerockclient.ui.wxGui import Utils, Messages
from filerockclient.ui.wxGui.constants import IMAGE_PATH

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade


class SyncDialog(wx.Dialog):

    def __init__(self, app, *args, **kwds):
        # begin wxGlade: SyncDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.MAXIMIZE_BOX|wx.THICK_FRAME
        wx.Dialog.__init__(self, *args, **kwds)
        self.bitmap_1 = wx.StaticBitmap(self, -1, wx.Bitmap(os.path.join(IMAGE_PATH, "stop-64.png"), wx.BITMAP_TYPE_PNG))
        self.message_label = wx.StaticText(self, -1, "Basis Mismatch")
        self.bitmap_button_1 = wx.BitmapButton(self, -1, wx.Bitmap(os.path.join(IMAGE_PATH, "question.png"), wx.BITMAP_TYPE_PNG), style=wx.NO_BORDER)
        self.robohash_from_bitmap = wx.StaticBitmap(self, -1, wx.Bitmap(os.path.join(IMAGE_PATH, "noconnection_robot_100x100.png"), wx.BITMAP_TYPE_PNG))
        self.bitmap_4 = wx.StaticBitmap(self, -1, wx.Bitmap(os.path.join(IMAGE_PATH, "change-to.png"), wx.BITMAP_TYPE_PNG))
        self.robohash_to_bitmap = wx.StaticBitmap(self, -1, wx.Bitmap(os.path.join(IMAGE_PATH, "noconnection_robot_100x100.png"), wx.BITMAP_TYPE_PNG))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnHelp, self.bitmap_button_1)
        # end wxGlade
        self.app = app
        self.logger = logging.getLogger("FR.Gui" + self.__class__.__name__)
        self.UNKNOWN_BASIS_STRING = Messages.SYNC_UNKNOWN_BASIS_STRING
        self.mismatch_message = Messages.SYNC_BASIS_MISMATCH_MESSAGE
        self.message_label.SetLabel(self.mismatch_message % {
                                     "client_hash": self.UNKNOWN_BASIS_STRING,
                                     "server_hash": self.UNKNOWN_BASIS_STRING
                                     })
        font = self.message_label.GetFont()
        font.SetWeight(wx.FONTWEIGHT_BOLD)
        self.message_label.SetFont(font)

        self.panel_2 = Panel2(self)
        self.sizer_2.Add(self.panel_2, 1, wx.LEFT|wx.RIGHT|wx.EXPAND, 10)

        self.sizer_2.Add(self.CreateStdDialogButtonSizer(wx.OK|wx.CANCEL), 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 15)
        self.Layout()

    def __set_properties(self):
        # begin wxGlade: SyncDialog.__set_properties
        self.SetTitle(Messages.SYNC_DIALOG_TITLE)
        _icon = wx.EmptyIcon()
        pathname = os.path.join(IMAGE_PATH, "FileRock.ico")
        _icon.CopyFromBitmap(wx.Bitmap(pathname, wx.BITMAP_TYPE_ICO))
        self.SetIcon(_icon)
        self.SetSize((700, 560))
        self.bitmap_button_1.SetToolTipString(Messages.SYNC_BASIS_MISMATCH_HELP_TOOLTIP)
        self.bitmap_button_1.SetSize(self.bitmap_button_1.GetBestSize())
        # end wxGlade
        _icon = wx.Icon(pathname, wx.BITMAP_TYPE_ICO)
        self.SetIcon(_icon)

    def __do_layout(self):
        # begin wxGlade: SyncDialog.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_2 = wx.FlexGridSizer(1, 3, 0, 20)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_3_copy = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_2.Add(self.bitmap_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.Add(self.message_label, 0, wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3.Add(self.bitmap_button_1, 0, wx.ALIGN_RIGHT, 0)
        sizer_3_copy.Add(self.robohash_from_bitmap, 0, 0, 0)
        sizer_3_copy.Add(self.bitmap_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3_copy.Add(self.robohash_to_bitmap, 0, 0, 0)
        sizer_3.Add(sizer_3_copy, 1, 0, 0)
        grid_sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
        grid_sizer_2.AddGrowableCol(1)
        sizer_1.Add(grid_sizer_2, 0, wx.ALL|wx.EXPAND, 15)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        self.Centre()
        # end wxGlade
        self.sizer_2 = sizer_2

    def OnHelp(self, event): # wxGlade: SyncDialog.<event_handler>
        self.app.OnHashMismatchHelp(event)


    def updateRobotHash(self):
        self.robohash_from_bitmap.SetBitmap(Utils.GetVHash(self.local_basis, 100, self.logger))
        self.robohash_to_bitmap.SetBitmap(Utils.GetVHash(self.server_basis, 100, self.logger))

    def update_information(self, client_basis, server_basis, content):
        local_basis = client_basis
        self.local_basis = client_basis
        self.server_basis = server_basis

        if client_basis == Utils.UNKNOWN_HASH:
            local_basis = self.UNKNOWN_BASIS_STRING

        self.message_label.SetLabel(self.mismatch_message % {
                                            'client_hash': local_basis,
                                            'server_hash': server_basis
                                   })

        updateRobots = Thread(target=self.updateRobotHash)
        updateRobots.daemon = True
        updateRobots.run()
        if len(content) == 0:
            self.panel_2.give_message(Messages.BASIS_MISMATCH_NOTHING_TO_SYNC)
        for element in reversed(content):
            if u'newpathname' in element:
                self.panel_2.updatePathnameStatus(element[u'pathname'],
                                                  element[u'status'],
                                                  element[u'size'],
                                                  element[u'newpathname'])
            else:
                self.panel_2.updatePathnameStatus(element[u'pathname'],
                                                  element[u'status'],
                                                  element[u'size'])

# end of class SyncDialog


