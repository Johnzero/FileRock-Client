# -*- coding: ascii -*-
#  ______ _ _      _____            _       _____ _ _            _
# |  ____(_) |    |  __ \          | |     / ____| (_)          | |
# | |__   _| | ___| |__) |___   ___| | __ | |    | |_  ___ _ __ | |_
# |  __| | | |/ _ \  _  // _ \ / __| |/ / | |    | | |/ _ \ '_ \| __|
# | |    | | |  __/ | \ \ (_) | (__|   <  | |____| | |  __/ | | | |_
# |_|    |_|_|\___|_|  \_\___/ \___|_|\_\  \_____|_|_|\___|_| |_|\__|
#
# Copyright (C) 2012 Heyware s.r.l.
#
# This file is part of FileRock Client.
#
# FileRock Client is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# FileRock Client is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with FileRock Client. If not, see <http://www.gnu.org/licenses/>.
#

"""
This is the MainWindow module.




----

This module is part of the FileRock Client.

Copyright (C) 2012 - Heyware s.r.l.

FileRock Client is licensed under GPLv3 License.

"""

# generated by wxGlade 0.6.3 on Fri Jun 22 16:20:43 2012

import wx
import sys
import logging

from filerockclient.util.utilities import format_bytes
from filerockclient.interfaces import GStatus, GStatuses
from filerockclient.ui.wxGui import Messages
from filerockclient.ui.wxGui.Utils import STATEMESSAGES


FORCE_WIN = False
FORCE_OSX = False

from filerockclient.ui.wxGui.default.Template import MainWindow as TMainWindow
if sys.platform.startswith('win') or sys.platform.startswith('darwin'):
    from filerockclient.ui.wxGui.default.panel_2 import Panel2
    from filerockclient.ui.wxGui.default.panel_1 import Panel1
    from filerockclient.ui.wxGui.default.panel_3 import Panel3
else:
    from filerockclient.ui.wxGui.linux.panel_2 import Panel2
    from filerockclient.ui.wxGui.linux.panel_1 import Panel1
    from filerockclient.ui.wxGui.linux.panel_3 import Panel3


from wx.lib.newevent import NewEvent

# this custom event is raised when an GUI should be updated,
# that is global status or hash changes
OnInit, EVT_INIT = NewEvent()

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade
ONEMEGAINBYTES = (1024*1024)
ONEGIGAINBYTES = ONEMEGAINBYTES * 1024

MAXUSERNAMELEN = 15
MAXHOSTNAMELEN = 10


class MainWindow(TMainWindow.MainWindow):
    def __init__(self, app, images_dir, icons_dir, *args, **kwds):
        # begin wxGlade: MainWindow.__init__
        super(MainWindow, self).__init__(images_dir, icons_dir, *args, **kwds)
        self.logger = logging.getLogger("FR.Gui." + self.__class__.__name__)
        self.loggerViewer = None
        self.app = app
        self.append_panel(self.sizer_2)
        self.__personalization()
        self.OnStatusClick(None)

    def OnStatusClick(self, event):  # wxGlade: MainWindow.<event_handler>
        self.enlight_button('status')
        self.panel_1.Show()
        self.panel_2.Hide()
        self.panel_3.Hide()
        self.Layout()

    def OnActivityClick(self, event):  # wxGlade: MainWindow.<event_handler>
        self.enlight_button('activity')
        self.panel_2.Show()
        self.panel_1.Hide()
        self.panel_3.Hide()
        self.Layout()

    def OnPreferencesClick(self, event):  # wxGlade: MainWindow.<event_handler>
        self.enlight_button('preferences')
        self.panel_3.Show()
        self.panel_1.Hide()
        self.panel_2.Hide()
        self.Layout()

    def enlight_button(self, button_name):
        for key, button in self.buttons.iteritems():
            if button_name == key:
                button.SetBitmapLabel(self.BUTTON_ICONS_LIGHT[key])
            else:
                button.SetBitmapLabel(self.BUTTON_ICONS[key])

    def OnLogsClick(self, event):
        self.app.OnLogViewer(event)

    def _state_icon(self, filename):
        return wx.Bitmap(self._icon_path(filename))

    def change_font_size(self, label):
        pass
#        font = label.GetFont()
#        font.SetPointSize(font.GetPointSize()-2)
#        label.SetFont(font)

    def __personalization(self):
#        self.__init_panel1()
        _icon = wx.Icon(self._image_path("other/FileRock.ico"), wx.BITMAP_TYPE_ICO)
        self.SetIcon(_icon)

        self.Bind(wx.EVT_CLOSE, self.OnClose)

        self.BUTTON_ICONS = {
            'status': wx.Bitmap(self._image_path("GUI-icons/dialog-information-48.png"), wx.BITMAP_TYPE_PNG),
            'activity': wx.Bitmap(self._image_path("GUI-icons/activity-48.png"), wx.BITMAP_TYPE_PNG),
            'preferences':  wx.Bitmap(self._image_path("GUI-icons/preferences-system-48.png"), wx.BITMAP_TYPE_PNG)
        }

        self.BUTTON_ICONS_LIGHT = {
            'status': wx.Bitmap(self._image_path("GUI-icons/dialog-information-48-light.png"), wx.BITMAP_TYPE_PNG),
            'activity': wx.Bitmap(self._image_path("GUI-icons/activity-48-light.png"), wx.BITMAP_TYPE_PNG),
            'preferences':  wx.Bitmap(self._image_path("GUI-icons/preferences-system-48-light.png"), wx.BITMAP_TYPE_PNG)
        }

        self.statesMessage = STATEMESSAGES


        assert set(self.statesMessage.keys()) == GStatus.allStates, 'There are not messages to cover %s Client states' % GStatus.allStates.difference(set(self.statesMessage.keys()))


        self.sizer_3_staticbox.SetLabel(Messages.MAINWINDOW_USER_SPACE_SECTION_LABEL)
#        self.sizer_22_staticbox.SetLabel(Messages.MAINWINDOW_INFO_SECTION_LABEL)

        #BUTTONS
        self.start_stop_bitmap_button.SetToolTipString(Messages.MAINWINDOW_START_STOP_BUTTON_TOOLTIP)
        self.status_bitmap_button.SetToolTipString(Messages.MAINWINDOW_STATUS_BUTTON_TOOLTIP)
        self.activity_bitmap_button.SetToolTipString(Messages.MAINWINDOW_ACTIVITY_BUTTON_TOOLTIP)
        self.preferences_bitmap_button.SetToolTipString(Messages.MAINWINDOW_PREFERENCES_BUTTON_TOOLTIP)
        self.logs_bitmap_button.SetToolTipString(Messages.MAINWINDOW_LOGS_BUTTON_TOOTIP)

        #LABELS
#        self.user_label.SetLabel(Messages.MAINWINDOW_USER_LABEL)
#        self.client_label.SetLabel(Messages.MAINWINDOW_CLIENT_LABEL)
#        self.version_label.SetLabel(Messages.MAINWINDOW_VERSION_LABEL)
        self.status_label.SetLabel(Messages.MAINWINDOW_STATUS_BUTTON_LABEL)
        self.activity_label.SetLabel(Messages.MAINWINDOW_ACTIVITY_BUTTON_LABEL)
        self.preferences_label.SetLabel(Messages.MAINWINDOW_PREFERENCES_BUTTON_LABEL)
        self.logs_label.SetLabel(Messages.MAINWINDOW_LOGS_BUTTON_LABEL)

        map(self.change_font_size, [self.folder_label,
                                    self.start_stop_label,
                                    self.activity_label,
                                    self.status_label,
                                    self.preferences_label,
                                    self.logs_label])



        self.get_more_space_button.SetLabel(
                                Messages.MAINWINDOW_MORE_SPACE_BUTTON_LABEL
                                )

        self.SetTitle(Messages.MAINWINDOW_TITLE)

        self.started = False

        self.start_stop_image = {
                True: wx.Bitmap(self._image_path('GUI-icons/pause-48-tango.png'), wx.BITMAP_TYPE_PNG),
                False: wx.Bitmap(self._image_path('GUI-icons/start-48-tango.png'), wx.BITMAP_TYPE_PNG)
        }
        self.start_stop_text = {
                True: Messages.MAINWINDOW_PAUSE_LABEL,
                False: Messages.MAINWINDOW_START_LABEL
        }
        self.connecting_disconnecting_text = {
                True: Messages.MAINWINDOW_DISCONNECTING_LABEL,
                False: Messages.MAINWINDOW_CONNECTING_LABEL
        }
        self._update_start_stop_button()

    def OnStartStop(self, event):
        """
        Action fired by the Pause/Start button
        """
        if self.started:
            self.OnStop(event)
        else:
            self.OnStart(event)
        self.start_stop_bitmap_button.Disable()

    def OnClose(self, event):
        """
        Hides itself
        """
        self.Hide()

    def append_panel(self, sizer):
        """
        Adds the panel into its sizer
        """
        self.panel_1 = Panel1(self)
        self.panel_2 = Panel2(self)
        self.panel_3 = Panel3(self, self.app)
        sizer.Add(self.panel_1, 1, wx.EXPAND, 0)
        sizer.Add(self.panel_2, 1, wx.EXPAND, 0)
        sizer.Add(self.panel_3, 1, wx.EXPAND, 0)
        self.panel_1.Hide()
        self.panel_2.Hide()
        self.panel_3.Hide()
        self.panel_1.Show()
        self.Fit()
        self.SetMinSize(self.GetSize())


    def OnUpdateClientInfo(self, event):
        '''
        event.infos contains:
            username: string
            client_id: number
            client_hostname: string
            client_platform: string
            client_version: string
            basis: string
            last_commit_timestamp: number or None
            used_space: number or None
            user_quota: number or None
        '''

        client_id = event.infos['client_id']
        hostname = event.infos['client_hostname']
        username = event.infos["username"]

        self.panel_1.version_ctrl.SetValue(event.infos['client_version'], True)
        if client_id is not None:
            self.panel_1.client_ctrl.SetValue(client_id, True)
        if hostname is not None:
            self.panel_1.host_ctrl.SetValue(hostname, True)
        if username is not None:
            self.panel_1.user_ctrl.SetValue(username, True)
        self.OnUpdateSessionInfo(event)
        self.Layout()
        self.panel_1.Layout()
        self.Fit()

    def OnUpdateSessionInfo(self, event):
        '''
        event.infos contains:
            last_commit_client_id: string or None
            last_commit_client_hostname: string or None
            last_commit_client_platform: string or None
            last_commit_timestamp: unix time
            user_quota: number (space in bytes) or None
            used_space: number (space in bytes) or None
            basis
        '''
        if event.infos['user_quota'] is not None\
        and event.infos['used_space'] is not None:
            self.setSpaceInfo(int(event.infos['user_quota']),
                              int(event.infos['used_space'])
                             )
        if 'basis' in event.infos:
            self.panel_1.updateHash(event.infos['basis'])
        if event.infos['last_commit_timestamp'] is not None:
            self.panel_1.updateTimestamp(event.infos['last_commit_timestamp'])

    def OnUpdatePathnameStatus(self, event):
        """
        Catches the updated pathname event and
        delegates it to the right element
        """
        self.updatePathnameStatus(event.pathname, event.status, event.extras)

    def OnUpdateConfig(self, event):
        """
        Asks to the panel3 to update the configuration shown
        """
        self.panel_3.updateConfig(event.cfg)
        self.app.tbicon.unlock()

    def OnRoboHashHelp(self, event):
        """
        Delegates the event to the gui
        """
        self.app.OnRoboHashHelp(event)

    def OnGetMoreSpace(self, event):
        """
        Delegates the event to the gui
        """
        self.app.OnGetMoreSpace(event)

    def OnFileRockFolder(self, event):
        """
        Delegates the event to the gui
        """
        self.app.OnOpenWareboxRequest(event)

    def _update_start_stop_button(self):
        """
        Updates the start/pause button
        """
        self.start_stop_label.SetLabel(self.start_stop_text[self.started])
        self.start_stop_bitmap_button.SetBitmapLabel(
            self.start_stop_image[self.started]
            )
        self.Layout()
        self.start_stop_bitmap_button.Enable()

    def _update_start_stop_status(self, status):
        if self.started and (status == GStatuses.NC_STOPPED):
            self.started = False
            self._update_start_stop_button()
        elif not self.started and (status != GStatuses.NC_STOPPED):
            self.started = True
            self._update_start_stop_button()

    def updateStatus(self, status):
        """
        Updates the status in whole the gui
        """
        self.panel_1.updateStatus(status)
        self.panel_2.updateStatus(status)
        self._update_start_stop_status(status)
#        self.status_bitmap_button.SetBitmapLabel(self.statesBitmap[status])

    def updatePathnameStatus(self, pathname, status, extras):
        """
        Updates the pathname status on panel2
        """
        self.panel_2.updatePathnameStatus(pathname, status, extras)

    def setSpaceInfo(self, user_quota, used_space):
        """
        Updates the space info on main window
        """
        string = Messages.SPACE_INFO_STRING % {
                                    "used_space": format_bytes(used_space),
                                    "user_quota": format_bytes(user_quota)
                                    }
        tooltip = Messages.SPACE_INFO_TOOLTIP % {
            "used_space_in_mega": used_space / ONEMEGAINBYTES
                                    }

        self.space_ctrl.SetValue(string)
        self.space_ctrl.SetToolTipString(tooltip)
        self.used_space_bar.SetValue(((used_space * 1000) / user_quota))

    def OnStart(self, event):
        self.app.OnStart(event)

    def OnStop(self, event):
        self.app.OnPause(event)
# end of class MainWindow

